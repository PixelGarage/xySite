<?php
/**
 * @file
 * Provides a Views style plugin displaying a custom map with markers and routes in it.
 */

/* =============================================================================
 *   Configuration form to import content types for map items and layers
 * ========================================================================== */
/**
 * Implements hook_help().
 */
function custom_map_help($path, $arg) {
  switch ($path) {
    case 'admin/help#custom_map':
    case 'admin/config/content/custom_map':
      $output = '<p>' . t('Custom map allows to add a configurable google map, available as a views style plugin, to your project. The map can be customized by adding configurable markers, custom layers and styles.');
      $output .= '<br>' . t('To facilitate this functionality, custom map allows to import pre-defined content types ("MapMarker", "MapRoute"), which can be used for an easy configuration of these map elements in the backend. ');
      $output .= t('The custom map view can then collect these markers and routes and display it on the map.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_menu.
 */
function custom_map_menu() {
  $items['admin/config/content/custom_map'] = array(
    'title' => 'Custom map',
    'description' => 'Import marker and route content types for the custom map.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_map_config_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer custom map'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'custom_map.admin.inc'
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function custom_map_permission() {
  return array(
    'administer custom map' => array(
      'title' => t('Administer Custom map'),
    ),
  );
}

/* =============================================================================
 *   Views style plugin
 * ========================================================================== */
/**
 * Implements hook_views_api().
 */
function custom_map_views_api() {
  return array('api' => 3);
}

/**
 * Preprocess function for theme hook views_custom_map (implemented as views_custom_map.tpl.php).
 * This function prepares all necessary variables to create the markup for the custom map and adds
 * all needed js files and js settings to display the markers and routes in it.
 */
function template_preprocess_views_custom_map(&$vars) {
  // Run preprocess function for unformatted style
  template_preprocess_views_view_unformatted($vars);

  // add the Google Maps API key to the html head
  $view = $vars['view'];
  $options = $vars['options'];
  $options += custom_map_default_options();

  $markup = ($options['custom_map_api_key'] != '') ?
    '<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?v=3&sensor=false&key=' . $options['custom_map_api_key'] . '"></script>' :
    '<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?v=3&sensor=false"></script>';
  $element = array(
    '#type' => 'markup',
    '#markup' => $markup,
  );
  drupal_add_html_head($element, 'google_maps_api_key');

  // get the custom map style
  $style = null;
  $options['alt_styled'] = false;
  $path = drupal_get_path('module', 'custom_map') . '/styles/default.json';
  if (file_exists($path) && ($file = file_get_contents($path)) !== false) {
    $style = json_decode($file);
  }
  // Allow other modules to alter the map style
  drupal_alter('custom_map_style', $style, $view, $options);


  // create markers and routes from rows
  $rows = $vars['rows'];
  $markers = array();
  foreach($rows as $row) {
    $markers[] = _custom_map_marker_from_row($row);
  }

  // add css/script files and settings
  $css_file = drupal_get_path('module', 'custom_map') . '/css/custom_map.css';
  drupal_add_css($css_file);

  $script_file = drupal_get_path('module', 'custom_map') . '/js/custom_map.js';
  drupal_add_js($script_file);

  $map_id = "map-" . $view->vid;
  $js_settings = array(
    'custom_map' => array(
      $map_id => array(
        'latitude' => (float)$options['custom_map_latitude'],
        'longitude' => (float)$options['custom_map_longitude'],
        'zoomFactor' => (int)$options['custom_map_zoom'],
        'minZoomFactor' => (int)$options['custom_map_zoom_min'],
        'maxZoomFactor' => (int)$options['custom_map_zoom_max'],
        'altStyled' => $options['alt_styled'],
        'style' => $style,
        'markers' => $markers,
      ),
    ),
  );
  drupal_add_js($js_settings, 'setting');

  // add variables used in template
  $icon_title = '';
  if (!empty($markers[0]['iconTitle'])) {
    $icon_title = sprintf('<img src="%s" width="%dpx" height="%dpx"/>', $markers[0]['iconTitle']['url'], $markers[0]['iconTitle']['width'], $markers[0]['iconTitle']['height']);
  }
  $vars['map_enabled'] = $options['custom_map_enabled'] ? '' : 'map-disabled';
  $vars['map_id'] = $map_id;
  $vars['info_icon'] = $icon_title;
  $vars['info_title'] = $markers[0]['title'];
  $vars['info_short'] = $markers[0]['short'];
  $vars['info_body'] = $markers[0]['body'];

}

/**
 * Display alternate custom map style when night checkbox is clicked.
 * @param $style
 * @param $view
 * @param $options
 */
function custom_map_custom_map_style_alter (&$style, &$view, &$options){
  $exposed_input = $view->exposed_input;
  if (!array_key_exists('field_day_night_tid', $exposed_input)) return;

  // check if alternate style has to be returned
  $element = $exposed_input['field_day_night_tid'];
  if (is_array($element) && count($element) == 1) {
    $element = $element[0];
  }
  if ($element == '13') {
    // get the alternate map style and return it
    $path = drupal_get_path('module', 'custom_map') . '/styles/alternate.json';
    if (file_exists($path) && ($file = file_get_contents($path)) !== false) {
      $style = json_decode($file);
      $options['alt_styled'] = true;
    }
  }
}

/**
 *  Implements hook_ajax_render_alter() to alter ajax settings command with replaceMapMarkerSettings command.
 */
function custom_map_ajax_render_alter(&$commands) {
  // make sure the ajax call came from custom map filters
  $custom_map_filter_ajax_response = false;
  foreach ($commands as $command) {
    if ($command['command'] == 'insert' && $command['method'] == 'replaceWith' && (strpos($command['data'], 'custom-map') > 0)) {
      $custom_map_filter_ajax_response = true;
    }
  }

  // alter merge of settings for custom map
  if ($custom_map_filter_ajax_response) {
    foreach ($commands as $index => $command) {
      if ($command['command'] == 'settings') {
        $commands[$index]['command'] = 'replaceMapMarkerSettings';
        break;
      }
    }
  }
}

/**
 * Creates an array with marker properties from a row.
 *
 * @param $row The row containing a marker.
 * @return array An array with all extracted marker properties.
 */
function _custom_map_marker_from_row($row) {
  //parse the row with DOM
  $marker = array();
  $html_row = '<html><head><meta charset="utf-8"></head><body>' . $row . '</body></html>';
  $doc = new DOMDocument();
  $doc->loadHTML($html_row);
  $doc->normalizeDocument();
  $xpath = new DOMXpath($doc);

  // get all fields
  $fields = $xpath->query('//div[contains(@class, "views-field")]');
  foreach ($fields as $field) {
    // get marker property name from field classes
    $classes = $field->getAttribute('class');
    $prop_key = _custom_map_marker_property_name($classes);

    // get field value
    $prop_value = '';
    $img_keys = array('icon','iconHover','iconNight', 'iconTitle');
    foreach ($field->childNodes as $child) {
      // remove white-spaces
      if ($child->nodeType != 1) continue;

      // find field content
      if ($child->getAttribute('class') == 'field-content') {

        if ($prop_key === 'body' || $prop_key === 'specialLink') {
          // return body as html
          foreach($child->childNodes as $node) {
            $prop_value .= $doc->saveHTML($node);
          }

        } else if (in_array($prop_key, $img_keys)) {
          // return image property
          foreach ($child->childNodes as $node) {
            if ($node->nodeType != 1 || $node->tagName !== 'img') continue;
            $prop_value = _custom_map_image_prop($node);
          }

        } else if ($prop_key === 'position') {
          // return position coordinates
          $coords = explode(',', $child->textContent);
          if (count($coords) == 2 && is_numeric($coords[0]) && is_numeric($coords[1])) {
            $prop_value = array('lat' => (float)$coords[0], 'lng' => (float)$coords[1]);
          } else {
            $prop_value = array('lat' => 47.366836, 'lng' => 8.542890);
          }

        } else if ($prop_key === 'anchor') {
          // return point coordinates
          $coords = explode(',', $child->textContent);
          if (count($coords) == 2 && is_numeric($coords[0]) && is_numeric($coords[1])) {
            $prop_value = array('x' => (int)$coords[0], 'y' => (int)$coords[1]);
          } else {
            $prop_value = array('x' => 0, 'y' => 0);
          }

        } else if ($prop_key === 'zIndex') {
          // return zIndex as integer
          $value = trim($child->textContent);
          $prop_value = 0;
          if (is_numeric($value)) {
            $prop_value = (int)$value;
          }

        } else if ($prop_key === 'clickable') {
          // return clickable as boolean
          $value = trim($child->textContent);
          $prop_value = true;
          if (empty($value) || strtolower($value) === 'no') {
            $prop_value = false;
          }

        } else {
          // text fields
          $prop_value = trim($child->textContent);

        }
        // get next field
        break;
      }
    }
    // set marker property
    $marker[$prop_key] = $prop_value;
  }

  return $marker;
}

/**
 * Returns the corresponding property name of a google map marker for the given views field.
 * @param $string
 * @return string
 */
function _custom_map_marker_property_name($string) {
  // extract field name from classes
  $parts = explode('views-field-', $string);
  $field_name = $parts[1];

  // return corresponding google marker property name
  switch($field_name) {
    case 'title':
      return 'title';
    case 'field-title-icon':
      return 'iconTitle';
    case 'body':
      return 'body';
    case 'field-short-description':
      return 'short';
    case 'field-special-link':
      return 'specialLink';
    case 'field-icon':
      return 'icon';
    case 'field-icon-hover':
      return 'iconHover';
    case 'field-icon-night':
      return 'iconNight';
    case 'field-icon-anchor-point':
      return 'anchor';
    case 'field-icon-z-index':
      return 'zIndex';
    case 'field-position':
      return 'position';
    case 'field-animation':
      return 'animation';
    case 'field-clickable':
      return 'clickable';
    case 'field-tour':
      return 'tour';
    default:
      return 'unknown';
  }
}

/**
 * Creates an marker image property.
 * @param $image
 * @return array
 */
function _custom_map_image_prop($image) {
  $img_prop = array();
  $img_w_h = 40;

  //get image uri
  $img_prop['url'] = $image->getAttribute('src');

  // get image width and height
  $img_prop['width']  = ($image->hasAttribute('width')) ? (int)$image->getAttribute('width') : $img_w_h;
  $img_prop['height'] = ($image->hasAttribute('height')) ? (int)$image->getAttribute('height') : $img_w_h;

  return $img_prop;
}


/* =============================================================================
 *   Views style option form
 * ========================================================================== */
/**
 * Get default options of the custom map.
 *
 * @return array An associative array of default options for the custom map.
 *
 * The following options are available:
 * custom_map_api_key:      API key for google maps. Mandatory.
 * custom_map_latitude:     Latitude coordinate of the center of the displayed map.
 * custom_map_longitude:    Longitude coordinate of the center of the displayed map.
 * custom_map_zoom:         Zoom factor of the displayed map.
 * custom_map_zoom_min:     Min. zoom factor of the displayed map.
 * custom_map_zoom_max:     Max. zoom factor of the displayed map.
 * custom_map_enabled       Initially enables/disables the keyboard/mouse user interaction with the map.
 */
function custom_map_default_options() {
  $options = array(
    'custom_map_api_key' => '',
    'custom_map_longitude' => '8.542890',
    'custom_map_latitude' => '47.366836',
    'custom_map_zoom' => '10',
    'custom_map_zoom_min' => '0',
    'custom_map_zoom_max' => '20',
    'custom_map_enabled' => true,
  );

  return $options;
}

/**
 * Add the custom map options to an existing form.
 *
 * @param $form
 *   A form array to add Isotope layout options to.
 * @param $default_values
 *   An array of default form values.
 */
function custom_map_add_options_to_form(&$form, $default_values) {
  $form['custom_map_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Google Map API key (optional)'),
    '#default_value' => $default_values['custom_map_api_key'],
    '#description' => t('Add your Google map API key.'),
    '#size' => 60,
    '#maxlength' => 100,
    '#required' => false,
  );
  $form['custom_map_latitude'] = array(
    '#type' => 'textfield',
    '#title' => t('Latitude coordinate'),
    '#default_value' => $default_values['custom_map_latitude'],
    '#description' => t('Add the latitude coordinate of the center point in the map.'),
    '#size' => 20,
    '#maxlength' => 20,
    '#required' => false,
  );
  $form['custom_map_longitude'] = array(
    '#type' => 'textfield',
    '#title' => t('Longitude coordinate'),
    '#default_value' => $default_values['custom_map_longitude'],
    '#description' => t('Add the longitude coordinate of the center point in the map.'),
    '#size' => 20,
    '#maxlength' => 20,
    '#required' => false,
  );
  $form['custom_map_zoom'] = array(
    '#type' => 'textfield',
    '#title' => t('Zoom factor'),
    '#default_value' => $default_values['custom_map_zoom'],
    '#description' => t('Add the zoom factor of the displayed map.'),
    '#size' => 20,
    '#maxlength' => 20,
    '#required' => false,
  );
  $form['custom_map_zoom_min'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimal zoom factor'),
    '#default_value' => $default_values['custom_map_zoom_min'],
    '#description' => t('Add the minimal zoom factor of the displayed map (0-20).'),
    '#size' => 20,
    '#maxlength' => 20,
    '#required' => false,
  );
  $form['custom_map_zoom_max'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximal zoom factor'),
    '#default_value' => $default_values['custom_map_zoom_max'],
    '#description' => t('Add the maximal zoom factor of the displayed map (0-20).'),
    '#size' => 20,
    '#maxlength' => 20,
    '#required' => false,
  );
  $form['custom_map_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable/disable user interaction'),
    '#default_value' => $default_values['custom_map_enabled'],
    '#description' => t('Enable or disable all keyboard and mouse interactions with the map.'),
    '#size' => 20,
    '#maxlength' => 20,
    '#required' => false,
  );
}


