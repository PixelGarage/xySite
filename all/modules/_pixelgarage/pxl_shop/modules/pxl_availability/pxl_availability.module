<?php
/**
 * Created by PhpStorm.
 * User: ralph
 * Date: 06.12.16
 * Time: 13:16
 */


/**
 * Session wide data container.
 *
 * @return array Returns the session data array.
 */
function &pxl_availability_session_data() {
  if (!isset($_SESSION['pxl_availability'])) {
    $_SESSION['pxl_availability'] = array();
  }
  return $_SESSION['pxl_availability'];
}


/* =============================================================================
 *   Availability hooks
 * ========================================================================== */
/**
 * Implements hook_views_api.
 */
function pxl_availability_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'pxl_availability') .'/structures/views',
  );
}

/**
 * Implements hook_menu().
 */
function pxl_availability_menu() {
  // handles AJAX avaiability submission
  $items['ajax/availability/submit'] = array(
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
    'page callback' => 'pxl_availability_submit_callback',
  );
  return $items;
}

/**
 * AJAX callback from the availability block submit button.
 *
 * This callback returns the shopping cart filled with the product (SKU) information
 * of all added items.
 */
function pxl_availability_submit_callback() {
  //
  // get the time range and the available product SKUs for this time range
  $start_date = $_POST['startDateVal'];
  $end_date = $_POST['endDateVal'];
  $avail_skus = $_POST['availableSKUs'];

  //
  // create a cart item for each available product SKU and add them to the shopping cart
  foreach ($avail_skus as $avail_sku) {
    $item = pxl_shop_create_cart_item($avail_sku, $start_date, $end_date);
    pxl_shop_cart_add_item($item);
  }

  //
  // get the shopping cart and render it with its js settings (js files already loaded)
  drupal_static_reset('drupal_add_js');
  $cart_block = pxl_shop_block_view('pxl_shop_cart_form');
  $shopping_cart = drupal_render($cart_block);
  $js_settings = array(
    'settings' => drupal_add_js()['settings'],
    'dummy.js' => 0,
  );
  $rendered_js = drupal_get_js('header', $js_settings, true);

  // exit with shopping cart block
  drupal_add_http_header('Content-Type', 'text/html; charset=utf-8');
  print $rendered_js;
  print $shopping_cart;
  drupal_exit();
}


/**
 * Implements hook_theme().
 */
function pxl_availability_theme($existing, $type, $theme, $path) {
  return array(
    'pxl_availability_form' => array(
      'variables' => array(
        'calendar_view' => null,  // string view-name:view-display
        'check_in_time' => '15',
        'check_out_time' => '12',
        'selectable_days' => array(0,1,2,3,4,5,6), // array with all selectable days (0=Sunday, ... 6=Saturday)
      ),
      'file' => 'templates/pxl_availability_form.vars.php',
      'template' => 'templates/pxl-availability-form',
    ),
  );
}


/* =============================================================================
 *   Availability Block (Form with fullcalendar dropdown managing booked events)
 * ========================================================================== */
/**
 * Implements hook_block_info().
 **/
function pxl_availability_block_info() {
  $blocks['pxl_availability_form'] = array(
    'info' => t('Pixel availability calendar'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}



/**
 * Implements hook_block_configure().
 */
function pxl_availability_block_configure($delta = 0) {
  switch ($delta) {
    case 'pxl_availability_form':
      return _pxl_availability_settings_form($delta);
      break;
  }
}

function _pxl_availability_settings_form($delta = 0) {
  $form['pxl_availability'] = array(
    '#type' => 'fieldset',
    '#title' => t('Availability calendar settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $calendar_views = views_get_views_as_options(false, 'enabled');
  $form['pxl_availability']['calendar_view'] = array(
    '#title' => t('Choose a fullcalendar view'),
    '#type' => 'select',
    '#options' => $calendar_views,
    '#default_value' => variable_get($delta . '_calendar_view', ''),
    '#description' => t('Select the calendar view to be displayed.'),
    '#weight' => 1,
  );

  $form['pxl_availability']['check_in_time'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Check-in time'),
    '#default_value' => variable_get($delta . '_check_in_time', '15'),
    '#field_suffix' => t('h'),
    '#size' => 4,
    '#description'   => t('Define the check-in time in hours. Default: 15h'),
    '#weight' => 2,
  );
  $form['pxl_availability']['check_out_time'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Check-out time'),
    '#default_value' => variable_get($delta . '_check_out_time', '12'),
    '#field_suffix' => t('h'),
    '#size' => 4,
    '#description'   => t('Define the check-out time in hours. Default: 12h'),
    '#weight' => 3,
  );
  $days = array(0 => t('Sunday'),1 => t('Monday'),2 => t('Tuesday'),3 => t('Wednesday'),4 => t('Thursday'),5 => t('Friday'),6 => t('Saturday'),);
  $form['pxl_availability']['selectable_days'] = array(
    '#title' => t('Selectable days'),
    '#type' => 'checkboxes',
    '#options' => $days,
    '#default_value' => variable_get($delta . '_selectable_days', array(0,1,2,3,4,5,6)),
    '#description' => t('Select all week days that are visible in the calendar view.'),
    '#weight' => 4,
  );
  return $form;
}

/**
 * Implements hook_block_save().
 */
function pxl_availability_block_save($delta = 0, $settings = array()) {
  switch ($delta) {
    case 'pxl_availability_form':
      variable_set($delta . '_calendar_view', $settings['calendar_view']);
      variable_set($delta . '_check_in_time', $settings['check_in_time']);
      variable_set($delta . '_check_out_time', $settings['check_out_time']);
      variable_set($delta . '_selectable_days', $settings['selectable_days']);
      break;
  }
}

/**
 * Implements hook_block_view().
 */
function pxl_availability_block_view($delta = 0) {
  $block = array();

  switch ($delta) {
    case 'pxl_availability_form':
      $block['subject'] = null;
      $block['content'] = array (
        '#theme' => 'pxl_availability_form',
        '#calendar_view' => variable_get($delta . '_calendar_view'),
        '#check_in_time' => variable_get($delta . '_check_in_time'),
        '#check_out_time' => variable_get($delta . '_check_out_time'),
        '#selectable_days' => variable_get($delta . '_selectable_days'),
      );
      break;
  }

  return $block;
}


/* =============================================================================
 *   Fullcalendar options definition
 * ========================================================================== */

function pxl_availability_fullcalendar_api() {
  return array(
    'api' => fullcalendar_api_version(),
  );
}


/**
 * Implements hook_fullcalendar_options_info().
 */
function pxl_availability_fullcalendar_options_info() {
  return array(
    'pxl_availability' => array(
      'name' => t('Check Availability'),
      'js' => TRUE,
    ),
  );
}


/* =============================================================================
 *   Calendar events
 * ========================================================================== */
/**
 * Create a calendar event from a given shopping cart item.
 *
 * @param $item   object
 *    Shopping cart item to be booked.
 */
function pxl_availability_create_calendar_event_from_cart_item($item) {
  $node = new stdClass();
  $node->type = 'calendar_event';
  $node->language = LANGUAGE_NONE;
  $node->uid = 1;
  $node->status = 1;
  node_object_prepare($node);

  // fill fields
  $node->title = 'Booked';
  $node->field_state[LANGUAGE_NONE][0]['tid'] = _pxl_availabilty_calendar_event_state_tid('booked');
  $node->field_sku_id[LANGUAGE_NONE][0]['value'] = $item->id;
  $node->field_event_date[LANGUAGE_NONE][0]['value'] = $item->start;
  $node->field_event_date[LANGUAGE_NONE][0]['value2'] = $item->end;
  $node->field_order_id[LANGUAGE_NONE][0]['value'] = isset($item->chargeID) ? $item->chargeID : '';
  node_save($node);

}

function _pxl_availabilty_calendar_event_state_tid ($name) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'taxonomy_term')
    ->entityCondition('bundle', 'calendar_event_state')
    ->propertyCondition('name', $name)
    ->range(0, 1);

  $result = $query->execute();
  if (isset($result['taxonomy_term'])) {
    return key($result['taxonomy_term']);
  }
  return 1; // pending
}
