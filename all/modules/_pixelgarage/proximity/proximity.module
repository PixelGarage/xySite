<?php
/**
 * @file
 * Provides a views style plugin creating regularly or irregularly distributed items animating on mouse approach.
 */

/**
 * Internal proximity ajax load status code -- Proximity item was not found.
 */
define('PROXIMITY_ITEM_NOT_FOUND', 1);


/* -----------------------------------------------------------------
 *  Proximity ajax functions
 * ----------------------------------------------------------------- */
/**
 * Implementation of hook_menu().
 */
function proximity_menu() {
  // handles AJAX requests
  $items['proximity_item/get'] = array(
    'page callback' => 'proximity_item_callback',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'delivery callback' => 'proximity_item_delivery_callback',
  );
  return $items;
}

/**
 * Page callback function for AJAX request.
 */
function proximity_item_callback() {
  $args = func_get_args();
  $render_item = PROXIMITY_ITEM_NOT_FOUND;
  drupal_alter('proximity_ajax_render_item', $render_item, $args);

  return $render_item;
}

/**
 * A specific proximity delivery callback that doesn't return a whole rendered page but instead returns
 * only the requested content of the ajax call.
 *
 * @param $page_callback_result mixed   Return value of the page callback function.
 */
function proximity_item_delivery_callback($page_callback_result) {
  if (isset($page_callback_result) && is_null(drupal_get_http_header('Content-Type'))) {
    drupal_add_http_header('Content-Type', 'text/html; charset=utf-8');
  }

  // Send appropriate HTTP-Header for browsers and search engines.
  global $language;
  drupal_add_http_header('Content-Language', $language->language);

  // Menu status constants are integers; page content is a string or array.
  $content = '';
  if (is_int($page_callback_result)) {
    switch ($page_callback_result) {
      case MENU_NOT_FOUND:
        drupal_add_http_header('Status', '404 Not Found');

        $content = t("Page not found");
        break;

      case MENU_ACCESS_DENIED:
        drupal_add_http_header('Status', '403 Forbidden');

        $content = t("Access denied");
        break;

      case MENU_SITE_OFFLINE:
        print t('Site under maintenance');
        break;

      case PROXIMITY_ITEM_NOT_FOUND:
        $content = t('Proximity item content not found');
        break;

      default:
        $content = t('Unknown error');
        break;
    }
  } elseif (isset($page_callback_result)) {
    // print the requested content as simple html document
    $content = is_string($page_callback_result) ? $page_callback_result : drupal_render($page_callback_result);
  }

  // print html (only content will be added to target element)
  $html = '<html><head><title></title></head>';
  $html .= '<body class="ajax-loaded-proximity-item">' . $content . '</body></html>';
  print $html;
  drupal_page_footer();
}



/* -----------------------------------------------------------------
 *  Proximity view functions
 * ----------------------------------------------------------------- */

/**
 * Implements hook_views_api().
 */
function proximity_views_api() {
  return array('api' => 3);
}

/**
 * Pre-process function for theme hook views_view_proximity (implemented as views_view_proximity.tpl.php).
 * This function prepares all necessary variables to create the markup for the proximity layout.
 *
 * @param $vars array   Variables used in the view theming.
 */
function template_preprocess_views_view_proximity(&$vars) {
  global $base_url;

  // Run preprocess function for unformatted style
  template_preprocess_views_view_unformatted($vars);

  // get saved view options
  $view = $vars['view'];
  $options = $vars['options'];

  // add additional proximity options for use in javascript
  $container = '.view-' . drupal_clean_css_identifier($view->name) . '.view-display-id-' . $view->current_display . ' .pe-container';
  $desc_selector = !empty($options['proximity_desc_selector']) ? '.pe-item ' . $options['proximity_desc_selector'] : '';
  $ajax_url = $base_url . '/proximity_item/get/';
  $img_path = $base_url . '/' . drupal_get_path('module', 'proximity') . '/ajax-loader.gif';
  $ajax_loading = t('<p>Loading content</p></br>');
  $ajax_loading .= '<div id="proximity-ajax-loader"><img src="' . $img_path . '" alt="loading..."/></div>';

  // Setup proximity settings for specific container
  $js_settings = array(
    'proximity' => array(
      $container => array(
        'random_position' => $options['proximity_random_position'],
        'trans_duration' => $options['proximity_trans_duration'],
        'start_scale' => $options['proximity_start_scale'],
        'end_scale' => $options['proximity_end_scale'],
        'start_opacity' => $options['proximity_start_opacity'],
        'end_opacity' => $options['proximity_end_opacity'],
        'extent' => $options['proximity_extent'],
        'item_selector' => '.pe-item ' . $options['proximity_item_selector'],
        'desc_selector' => $desc_selector,
        'ajax_url' => $ajax_url,
        'ajax_loading' => $ajax_loading,
      ),
    ),
  );

  // create ajax load array (paramater per item to be added to ajax request path)
  $ajax_load_params = array();
  foreach ($view->result as $id => $item) {
    $ajax_load_params[$id] = $id;
  }
  drupal_alter('proximity_ajax_load_params', $ajax_load_params, $view->result);
  $vars['ajax_load_params'] = $ajax_load_params;

  // define percentage width of items
  $count = count($view->result);
  $vars['percentage_width'] = 100 / min($count, 6); // max. 6 items on a row

  // close button text
  $vars['close_text'] = t('Schliessen');

  // Apply the needed files and js settings
  $path = drupal_get_path('module', 'proximity');
  drupal_add_js($js_settings, 'setting');
  drupal_add_js($path . '/js/jquery.proximity.js');
  drupal_add_js($path . '/js/proximity.js');
  //drupal_add_css($path . '/css/proximity.css');
}
